{"version":3,"file":"724.bundle.552bba7b33fce2666956.js","mappings":"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","sources":["webpack:///../../../modes/tmtv/src/initToolGroups.js","webpack:///../../../modes/tmtv/src/toolbarButtons.js","webpack:///../../../modes/tmtv/src/id.js","webpack:///../../../modes/tmtv/src/index.js","webpack:///../../../modes/tmtv/src/utils/setCrosshairsConfiguration.js","webpack:///../../../modes/tmtv/src/utils/setFusionActiveVolume.js"],"sourcesContent":["export const toolGroupIds = {\n  CT: 'ctToolGroup',\n  PT: 'ptToolGroup',\n  Fusion: 'fusionToolGroup',\n  MIP: 'mipToolGroup',\n  default: 'default',\n  // MPR: 'mpr',\n};\n\nfunction _initToolGroups(toolNames, Enums, toolGroupService, commandsManager, modeLabelConfig) {\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      {\n        toolName: toolNames.ArrowAnnotate,\n        configuration: {\n          getTextCallback: (callback, eventDetails) => {\n            if (modeLabelConfig) {\n              callback(' ');\n            } else {\n              commandsManager.runCommand('arrowTextCallback', {\n                callback,\n                eventDetails,\n              });\n            }\n          },\n          changeTextCallback: (data, eventDetails, callback) => {\n            if (modeLabelConfig === undefined) {\n              commandsManager.runCommand('arrowTextCallback', {\n                callback,\n                data,\n                eventDetails,\n              });\n            }\n          },\n        },\n      },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.Probe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.CobbAngle },\n      { toolName: toolNames.Magnify },\n    ],\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\n    disabled: [\n      {\n        toolName: toolNames.Crosshairs,\n        configuration: {\n          viewportIndicators: false,\n          disableOnPassive: true,\n          autoPan: {\n            enabled: false,\n            panSize: 10,\n          },\n        },\n      },\n    ],\n  };\n\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.CT, tools);\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.PT, {\n    active: tools.active,\n    passive: [...tools.passive, { toolName: 'RectangleROIStartEndThreshold' }],\n    enabled: tools.enabled,\n    disabled: tools.disabled,\n  });\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.Fusion, tools);\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.default, tools);\n\n  const mipTools = {\n    active: [\n      {\n        toolName: toolNames.VolumeRotateMouseWheel,\n        configuration: {\n          rotateIncrementDegrees: 5,\n        },\n      },\n      {\n        toolName: toolNames.MipJumpToClick,\n        configuration: {\n          toolGroupId: toolGroupIds.PT,\n        },\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n    ],\n    enabled: [\n      { toolName: toolNames.SegmentationDisplay },\n      {\n        toolName: toolNames.OrientationMarker,\n        configuration: {\n          orientationWidget: {\n            viewportCorner: 'BOTTOM_LEFT',\n          },\n        },\n      },\n    ],\n  };\n\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.MIP, mipTools);\n}\n\nfunction initToolGroups(toolNames, Enums, toolGroupService, commandsManager, modeLabelConfig) {\n  _initToolGroups(toolNames, Enums, toolGroupService, commandsManager, modeLabelConfig);\n}\n\nexport default initToolGroups;\n","import { defaults, ToolbarService } from '@ohif/core';\nimport { toolGroupIds } from './initToolGroups';\n\nconst { windowLevelPresets } = defaults;\n\nconst setToolActiveToolbar = {\n  commandName: 'setToolActiveToolbar',\n  commandOptions: {\n    toolGroupIds: [toolGroupIds.CT, toolGroupIds.PT, toolGroupIds.Fusion],\n  },\n};\n\nconst toolbarButtons = [\n  {\n    id: 'MeasurementTools',\n    uiType: 'ohif.splitButton',\n    props: {\n      groupId: 'MeasurementTools',\n      primary: ToolbarService.createButton({\n        id: 'Length',\n        icon: 'tool-length',\n        label: 'Length',\n        tooltip: 'Length Tool',\n        commands: setToolActiveToolbar,\n        evaluate: 'evaluate.cornerstoneTool',\n      }),\n      secondary: {\n        icon: 'chevron-down',\n        tooltip: 'More Measure Tools',\n      },\n      items: [\n        ToolbarService.createButton({\n          id: 'Bidirectional',\n          icon: 'tool-bidirectional',\n          label: 'Bidirectional',\n          tooltip: 'Bidirectional Tool',\n          commands: setToolActiveToolbar,\n          evaluate: 'evaluate.cornerstoneTool',\n        }),\n        ToolbarService.createButton({\n          id: 'ArrowAnnotate',\n          icon: 'tool-annotate',\n          label: 'Arrow Annotate',\n          tooltip: 'Arrow Annotate Tool',\n          commands: setToolActiveToolbar,\n          evaluate: 'evaluate.cornerstoneTool',\n        }),\n        ToolbarService.createButton({\n          id: 'EllipticalROI',\n          icon: 'tool-ellipse',\n          label: 'Ellipse',\n          tooltip: 'Ellipse Tool',\n          commands: setToolActiveToolbar,\n          evaluate: 'evaluate.cornerstoneTool',\n        }),\n      ],\n    },\n  },\n  {\n    id: 'Zoom',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-zoom',\n      label: 'Zoom',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  // Window Level + Presets\n  {\n    id: 'WindowLevel',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-window-level',\n      label: 'Window Level',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  // Crosshairs Button\n  {\n    id: 'Crosshairs',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-crosshair',\n      label: 'Crosshairs',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  // Pan Button\n  {\n    id: 'Pan',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  // Rectangle ROI Start End Threshold Button\n  {\n    id: 'RectangleROIStartEndThreshold',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-create-threshold',\n      label: 'Rectangle ROI Threshold',\n      commands: setToolActiveToolbar,\n      evaluate: {\n        name: 'evaluate.cornerstoneTool',\n        disabledText: 'Select the PT Axial to enable this tool',\n      },\n      options: 'tmtv.RectangleROIThresholdOptions',\n    },\n  },\n];\n\nexport default toolbarButtons;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { hotkeys, classes } from '@ohif/core';\nimport toolbarButtons from './toolbarButtons.js';\nimport { id } from './id.js';\nimport initToolGroups, { toolGroupIds } from './initToolGroups.js';\nimport setCrosshairsConfiguration from './utils/setCrosshairsConfiguration.js';\nimport setFusionActiveVolume from './utils/setFusionActiveVolume.js';\nimport i18n from 'i18next';\n\nconst { MetadataProvider } = classes;\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  measurements: '@ohif/extension-default.panelModule.measure',\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\n};\n\nconst cs3d = {\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\n  segPanel: '@ohif/extension-cornerstone-dicom-seg.panelModule.panelSegmentation',\n};\n\nconst tmtv = {\n  hangingProtocol: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  petSUV: '@ohif/extension-tmtv.panelModule.petSUV',\n  toolbox: '@ohif/extension-tmtv.panelModule.tmtvBox',\n  export: '@ohif/extension-tmtv.panelModule.tmtvExport',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-seg': '^3.0.0',\n  '@ohif/extension-tmtv': '^3.0.0',\n};\n\nlet unsubscriptions = [];\nfunction modeFactory({ modeConfiguration }) {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'tmtv',\n    displayName: i18n.t('Modes:Total Metabolic Tumor Volume'),\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\n      const {\n        toolbarService,\n        toolGroupService,\n        customizationService,\n        hangingProtocolService,\n        displaySetService,\n        viewportGridService,\n      } = servicesManager.services;\n\n      const utilityModule = extensionManager.getModuleEntry(\n        '@ohif/extension-cornerstone.utilityModule.tools'\n      );\n\n      const { toolNames, Enums } = utilityModule.exports;\n\n      // Init Default and SR ToolGroups\n      initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\n\n      const { unsubscribe } = toolGroupService.subscribe(\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\n        () => {\n          // For fusion toolGroup we need to add the volumeIds for the crosshairs\n          // since in the fusion viewport we don't want both PT and CT to render MIP\n          // when slabThickness is modified\n          const { displaySetMatchDetails } = hangingProtocolService.getMatchDetails();\n\n          setCrosshairsConfiguration(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n\n          setFusionActiveVolume(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n        }\n      );\n\n      unsubscriptions.push(unsubscribe);\n      toolbarService.addButtons(toolbarButtons);\n      toolbarService.createButtonSection('primary', [\n        'MeasurementTools',\n        'Zoom',\n        'WindowLevel',\n        'Crosshairs',\n        'Pan',\n        'SyncToggle',\n      ]);\n      toolbarService.createButtonSection('ROIThresholdToolbox', ['RectangleROIStartEndThreshold']);\n\n      customizationService.addModeCustomizations([\n        {\n          id: 'segmentation.panel',\n          segmentationPanelMode: 'expanded',\n          addSegment: false,\n          onSegmentationAdd: () => {\n            commandsManager.run('createNewLabelmapFromPT');\n          },\n        },\n      ]);\n\n      // This is a hack and we need to find a better way to enable\n      // some tools that require the viewport to be ready\n      const { unsubscribe: unsub1 } = viewportGridService.subscribe(\n        viewportGridService.EVENTS.VIEWPORTS_READY,\n        () => {\n          commandsManager.run('setToolEnabled', {\n            toolName: 'OrientationMarker',\n            toolGroupId: 'mipToolGroup',\n          });\n          unsub1();\n        }\n      );\n\n      // For the hanging protocol we need to decide on the window level\n      // based on whether the SUV is corrected or not, hence we can't hard\n      // code the window level in the hanging protocol but we add a custom\n      // attribute to the hanging protocol that will be used to get the\n      // window level based on the metadata\n      hangingProtocolService.addCustomAttribute(\n        'getPTVOIRange',\n        'get PT VOI based on corrected or not',\n        props => {\n          const ptDisplaySet = props.find(imageSet => imageSet.Modality === 'PT');\n\n          if (!ptDisplaySet) {\n            return;\n          }\n\n          const { imageId } = ptDisplaySet.images[0];\n          const imageIdScalingFactor = MetadataProvider.get('scalingModule', imageId);\n\n          const isSUVAvailable = imageIdScalingFactor && imageIdScalingFactor.suvbw;\n\n          if (isSUVAvailable) {\n            return {\n              windowWidth: 5,\n              windowCenter: 2.5,\n            };\n          }\n\n          return;\n        }\n      );\n    },\n    onModeExit: ({ servicesManager }) => {\n      const {\n        toolGroupService,\n        syncGroupService,\n        segmentationService,\n        cornerstoneViewportService,\n        uiDialogService,\n        uiModalService,\n      } = servicesManager.services;\n\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\n      uiDialogService.dismissAll();\n      uiModalService.hide();\n      toolGroupService.destroy();\n      syncGroupService.destroy();\n      segmentationService.destroy();\n      cornerstoneViewportService.destroy();\n    },\n    validationTags: {\n      study: [],\n      series: [],\n    },\n    isValidMode: ({ modalities, study }) => {\n      const modalities_list = modalities.split('\\\\');\n      const invalidModalities = ['SM'];\n\n      const isValid =\n        modalities_list.includes('CT') &&\n        study.mrn !== 'M1' &&\n        modalities_list.includes('PT') &&\n        !invalidModalities.some(modality => modalities_list.includes(modality)) &&\n        // This is study is a 4D study with PT and CT and not a 3D study for the tmtv\n        // mode, until we have a better way to identify 4D studies we will use the\n        // StudyInstanceUID to identify the study\n        // Todo: when we add the 4D mode which comes with a mechanism to identify\n        // 4D studies we can use that\n        study.studyInstanceUid !== '1.3.6.1.4.1.12842.1.1.14.3.20220915.105557.468.2963630849';\n\n      // there should be both CT and PT modalities and the modality should not be SM\n      return {\n        valid: isValid,\n        description: 'The mode requires both PT and CT series in the study',\n      };\n    },\n    routes: [\n      {\n        path: 'tmtv',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: () => {\n          return {\n            id: ohif.layout,\n            props: {\n              leftPanels: [ohif.thumbnailList],\n              leftPanelClosed: true,\n              rightPanels: [[tmtv.toolbox, cs3d.segPanel, tmtv.export], tmtv.petSUV],\n              viewports: [\n                {\n                  namespace: cs3d.viewport,\n                  displaySetsToDisplay: [ohif.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    hangingProtocol: tmtv.hangingProtocol,\n    sopClassHandlers: [ohif.sopClassHandler],\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\n    ...modeConfiguration,\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setCrosshairsConfiguration(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ctDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n\n  const toolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs\n  );\n\n  const crosshairsConfig = {\n    ...toolConfig,\n    filterActorUIDsToSetSlabThickness: [displaySets[0].displaySetInstanceUID],\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs,\n    crosshairsConfig\n  );\n}\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setFusionActiveVolume(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ptDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n\n  if (!displaySets || displaySets.length === 0) {\n    return;\n  }\n\n  const wlToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel\n  );\n\n  const ellipticalToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI\n  );\n\n  // Todo: this should not take into account the loader id\n  const volumeId = `cornerstoneStreamingImageVolume:${displaySets[0].displaySetInstanceUID}`;\n\n  const windowLevelConfig = {\n    ...wlToolConfig,\n    volumeId,\n  };\n\n  const ellipticalROIConfig = {\n    ...ellipticalToolConfig,\n    volumeId,\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel,\n    windowLevelConfig\n  );\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI,\n    ellipticalROIConfig\n  );\n}\n"],"names":["toolGroupIds","CT","PT","Fusion","MIP","default","toolNames","Enums","toolGroupService","commandsManager","modeLabelConfig","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","passive","Length","ArrowAnnotate","configuration","getTextCallback","callback","eventDetails","runCommand","changeTextCallback","data","undefined","Bidirectional","DragProbe","Probe","EllipticalROI","RectangleROI","StackScroll","Angle","CobbAngle","Magnify","enabled","SegmentationDisplay","disabled","Crosshairs","viewportIndicators","disableOnPassive","autoPan","panSize","createToolGroupAndAddTools","mipTools","VolumeRotateMouseWheel","rotateIncrementDegrees","MipJumpToClick","toolGroupId","OrientationMarker","orientationWidget","viewportCorner","_initToolGroups","windowLevelPresets","defaults","setToolActiveToolbar","commandName","commandOptions","id","uiType","props","groupId","primary","ToolbarService","createButton","icon","label","tooltip","commands","evaluate","secondary","items","name","disabledText","options","packageJson","MetadataProvider","classes","ohif","cs3d","tmtv","extensionDependencies","unsubscriptions","modeFactory","modeConfiguration","routeName","displayName","i18n","t","onModeEnter","servicesManager","extensionManager","toolbarService","customizationService","hangingProtocolService","displaySetService","viewportGridService","services","utilityModule","getModuleEntry","exports","initToolGroups","unsubscribe","subscribe","EVENTS","VIEWPORT_ADDED","displaySetMatchDetails","getMatchDetails","matches","matchDetails","get","SeriesInstanceUID","displaySets","getDisplaySetsForSeries","crosshairsConfig","getToolConfiguration","filterActorUIDsToSetSlabThickness","displaySetInstanceUID","setToolConfiguration","setCrosshairsConfiguration","length","wlToolConfig","ellipticalToolConfig","volumeId","windowLevelConfig","ellipticalROIConfig","setFusionActiveVolume","push","addButtons","toolbarButtons","createButtonSection","addModeCustomizations","segmentationPanelMode","addSegment","onSegmentationAdd","run","unsub1","VIEWPORTS_READY","addCustomAttribute","ptDisplaySet","find","imageSet","Modality","imageId","images","imageIdScalingFactor","suvbw","windowWidth","windowCenter","onModeExit","syncGroupService","segmentationService","cornerstoneViewportService","uiDialogService","uiModalService","forEach","dismissAll","hide","destroy","validationTags","study","series","isValidMode","modalities","modalities_list","split","valid","includes","mrn","some","modality","studyInstanceUid","description","routes","path","layoutTemplate","leftPanels","leftPanelClosed","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","hangingProtocol","sopClassHandlers","hotkeys","hotkeyBindings"],"sourceRoot":""}