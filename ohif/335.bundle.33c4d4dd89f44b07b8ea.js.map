{"version":3,"file":"335.bundle.33c4d4dd89f44b07b8ea.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.js","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/calculateSUVPeak.ts","webpack:///../../../extensions/tmtv/src/utils/calculateTMTV.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.js","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","const ctAXIAL = {\n  viewportOptions: {\n    viewportId: 'ctAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'ctToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ctSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ctSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\nconst ctCORONAL = {\n  viewportOptions: {\n    viewportId: 'ctCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ptAXIAL = {\n  viewportOptions: {\n    viewportId: 'ptAXIAL',\n    viewportType: 'volume',\n    background: [1, 1, 1],\n    orientation: 'axial',\n    toolGroupId: 'ptToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ptSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptCORONAL = {\n  viewportOptions: {\n    viewportId: 'ptCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionAXIAL = {\n  viewportOptions: {\n    viewportId: 'fusionAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'fusionToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'fusionSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionCORONAL = {\n  viewportOptions: {\n    viewportId: 'fusionCoronal',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst mipSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'mipSagittal',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'mipToolGroup',\n    syncGroups: [\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n\n    // Custom props can be used to set custom properties which extensions\n    // can react on.\n    customViewportProps: {\n      // We use viewportDisplay to filter the viewports which are displayed\n      // in mip and we set the scrollbar according to their rotation index\n      // in the cornerstone extension.\n      hideOverlays: true,\n    },\n  },\n  displaySets: [\n    {\n      options: {\n        blendMode: 'MIP',\n        slabThickness: 'fullVolume',\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nexport {\n  ctAXIAL,\n  ctSAGITTAL,\n  ctCORONAL,\n  ptAXIAL,\n  ptSAGITTAL,\n  ptCORONAL,\n  fusionAXIAL,\n  fusionSAGITTAL,\n  fusionCORONAL,\n  mipSAGITTAL,\n};\n","import {\n  ctAXIAL,\n  ctCORONAL,\n  ctSAGITTAL,\n  fusionAXIAL,\n  fusionCORONAL,\n  fusionSAGITTAL,\n  mipSAGITTAL,\n  ptAXIAL,\n  ptCORONAL,\n  ptSAGITTAL,\n} from './utils/hpViewports';\n\n/**\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\n * also camera synchronizer for each orientation\n */\nconst stage1 = {\n  name: 'default',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 3,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ctAXIAL,\n    ctSAGITTAL,\n    ctCORONAL,\n    ptAXIAL,\n    ptSAGITTAL,\n    ptCORONAL,\n    fusionAXIAL,\n    fusionSAGITTAL,\n    fusionCORONAL,\n    mipSAGITTAL,\n  ],\n  createdDate: '2021-02-23T18:32:42.850Z',\n};\n\n/**\n * The layout displays CT axial image in the top-left viewport, fusion axial image\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\n */\nconst stage2 = {\n  name: 'Fusion 2x2',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 2,\n    },\n  },\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\n};\n\n/**\n * The top row displays CT images in axial, sagittal, and coronal orientations from\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\n * and coronal orientations from left to right, respectively.\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\n * It includes synchronizers as well.\n */\nconst stage3 = {\n  name: '2x3-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 3,\n    },\n  },\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\n};\n\n/**\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\n * orientations from left to right, respectively, followed by a MIP sagittal image\n * that spans both rows on the rightmost side. The bottom row displays fusion images\n * in coronal, sagittal, and axial orientations from left to right, respectively.\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\n * from the top row spans the full height of both rows.\n * It includes synchronizers as well.\n */\nconst stage4 = {\n  name: '2x4-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n        {\n          x: 0,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ptCORONAL,\n    ptSAGITTAL,\n    ptAXIAL,\n    mipSAGITTAL,\n    fusionCORONAL,\n    fusionSAGITTAL,\n    fusionAXIAL,\n  ],\n};\n\nconst ptCT = {\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  locked: true,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2022-10-04T19:22:08.894Z',\n  availableTo: {},\n  editableBy: {},\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\n  protocolMatchingRules: [\n    {\n      attribute: 'ModalitiesInStudy',\n      constraint: {\n        contains: ['CT', 'PT'],\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PETCT',\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PET/CT',\n      },\n    },\n  ],\n  displaySetSelectors: {\n    ctDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT',\n          },\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT WB',\n          },\n        },\n      ],\n    },\n    ptDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'PT',\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'Corrected',\n          },\n        },\n        {\n          weight: 2,\n          attribute: 'SeriesDescription',\n          constraint: {\n            doesNotContain: {\n              value: 'Uncorrected',\n            },\n          },\n        },\n      ],\n    },\n  },\n\n  stages: [stage1, stage2, stage3, stage4],\n  numberOfPriorsReferenced: -1,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: ptCT.id,\n      protocol: ptCT,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PanelSection, Input, Button } from '@ohif/ui';\nimport { DicomMetadataStore, ServicesManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nconst DEFAULT_MEATADATA = {\n  PatientWeight: null,\n  PatientSex: null,\n  SeriesTime: null,\n  RadiopharmaceuticalInformationSequence: {\n    RadionuclideTotalDose: null,\n    RadionuclideHalfLife: null,\n    RadiopharmaceuticalStartTime: null,\n  },\n};\n\n/*\n * PETSUV panel enables the user to modify the patient related information, such as\n * patient sex, patientWeight. This is allowed since\n * sometimes these metadata are missing or wrong. By changing them\n * @param param0\n * @returns\n */\nexport default function PanelPetSUV({ servicesManager, commandsManager }) {\n  const { t } = useTranslation('PanelSUV');\n  const { displaySetService, toolGroupService, toolbarService, hangingProtocolService } = (\n    servicesManager as ServicesManager\n  ).services;\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\n\n  const handleMetadataChange = metadata => {\n    setMetadata(prevState => {\n      const newState = { ...prevState };\n      Object.keys(metadata).forEach(key => {\n        if (typeof metadata[key] === 'object') {\n          newState[key] = {\n            ...prevState[key],\n            ...metadata[key],\n          };\n        } else {\n          newState[key] = metadata[key];\n        }\n      });\n      return newState;\n    });\n  };\n\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\n      viewportMatchDetails,\n    });\n\n    if (!ptDisplaySet) {\n      return;\n    }\n\n    const metadata = commandsManager.runCommand('getPTMetadata', {\n      ptDisplaySet,\n    });\n\n    return {\n      ptDisplaySet,\n      metadata,\n    };\n  };\n\n  useEffect(() => {\n    const displaySets = displaySetService.getActiveDisplaySets();\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    if (!displaySets.length) {\n      return;\n    }\n\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n    if (!displaySetInfo) {\n      return;\n    }\n\n    const { ptDisplaySet, metadata } = displaySetInfo;\n    setPtDisplaySet(ptDisplaySet);\n    setMetadata(metadata);\n  }, []);\n\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n      ({ viewportMatchDetails }) => {\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n        if (!displaySetInfo) {\n          return;\n        }\n        const { ptDisplaySet, metadata } = displaySetInfo;\n        setPtDisplaySet(ptDisplaySet);\n        setMetadata(metadata);\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function updateMetadata() {\n    if (!ptDisplaySet) {\n      throw new Error('No ptDisplaySet found');\n    }\n\n    // metadata should be dcmjs naturalized\n    DicomMetadataStore.updateMetadataForSeries(\n      ptDisplaySet.StudyInstanceUID,\n      ptDisplaySet.SeriesInstanceUID,\n      metadata\n    );\n\n    // update the displaySets\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\n\n    // Crosshair position depends on the metadata values such as the positioning interaction\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\n    setTimeout(() => {\n      commandsManager.runCommand('resetCrosshairs');\n    }, 0);\n  }\n  return (\n    <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\n      <div className=\"flex min-h-0 flex-1 flex-col bg-black text-[13px] font-[300]\">\n        <PanelSection title={t('Patient Information')}>\n          <div className=\"flex flex-col\">\n            <div className=\"bg-primary-dark flex flex-col gap-4 p-2\">\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Patient Sex')}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.PatientSex || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    PatientSex: e.target.value,\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Weight')}\n                labelChildren={<span className=\"text-aqua-pale\"> kg</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.PatientWeight || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    PatientWeight: e.target.value,\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Total Dose')}\n                labelChildren={<span className=\"text-aqua-pale\"> bq</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadionuclideTotalDose: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Half Life')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadionuclideHalfLife: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Injection Time')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={\n                  metadata.RadiopharmaceuticalInformationSequence.RadiopharmaceuticalStartTime || ''\n                }\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadiopharmaceuticalStartTime: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Acquisition Time')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.SeriesTime || ''}\n                onChange={() => {}}\n              />\n              <Button\n                className=\"!h-[26px] !w-[115px] self-end !p-0\"\n                onClick={updateMetadata}\n              >\n                Reload Data\n              </Button>\n            </div>\n          </div>\n        </PanelSection>\n      </div>\n    </div>\n  );\n}\n\nPanelPetSUV.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, ActionButtons } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\nexport default function PanelRoiThresholdSegmentation({ servicesManager, commandsManager }) {\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n  const { t } = useTranslation('PanelSUVExport');\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  /**\n   * Update UI based on segmentation changes (added, removed, updated)\n   */\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  const tmtvValue = segmentations?.[0]?.cachedStats?.tmtv?.value || null;\n  const config = segmentations?.[0]?.cachedStats?.tmtv?.config || {};\n\n  segmentations.forEach(segmentation => {\n    const { cachedStats } = segmentation;\n    if (!cachedStats) {\n      return;\n    }\n\n    // segment 1\n    const suvPeak = cachedStats?.['1']?.suvPeak?.suvPeak;\n\n    if (Number.isNaN(suvPeak)) {\n      uiNotificationService.show({\n        title: 'SUV Peak',\n        message: 'Segmented volume does not allow SUV Peak calculation',\n        type: 'warning',\n      });\n    }\n  });\n\n  const actions = [\n    {\n      label: 'Export CSV',\n      onClick: () => {\n        commandsManager.runCommand('exportTMTVReportCSV', {\n          segmentations,\n          tmtv: tmtvValue,\n          config,\n        });\n      },\n      disabled: tmtvValue === null,\n    },\n    {\n      label: 'Create RT Report',\n      onClick: () => {\n        commandsManager.runCommand('createTMTVRTReport');\n      },\n      disabled: tmtvValue === null,\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mt-2 mb-10 flex flex-col\">\n        <div className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\">\n          {tmtvValue !== null ? (\n            <div className=\"bg-secondary-dark mt-1 flex items-baseline justify-between px-2 py-1\">\n              <span className=\"text-base font-bold uppercase tracking-widest text-white\">\n                {'TMTV:'}\n              </span>\n              <div className=\"text-white\">{`${tmtvValue} mL`}</div>\n            </div>\n          ) : null}\n          <div className=\"mt-2 flex justify-center\">\n            <ActionButtons\n              actions={actions}\n              t={t}\n            />\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"absolute bottom-1 flex cursor-pointer items-center justify-center text-blue-400 opacity-50 hover:opacity-80\"\n        onClick={() => {\n          // navigate to a url in a new tab\n          window.open('https://github.com/OHIF/Viewers/blob/master/modes/tmtv/README.md', '_blank');\n        }}\n      >\n        <Icon\n          width=\"15px\"\n          height=\"15px\"\n          name={'info'}\n          className={'text-primary-active ml-4 mr-3'}\n        />\n        <span>{'User Guide'}</span>\n      </div>\n    </>\n  );\n}\n\nPanelRoiThresholdSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\n\nexport default PanelROIThresholdExport;\n","import React from 'react';\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\nimport { Toolbox } from '@ohif/ui';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const wrappedPanelPetSuv = () => {\n    return (\n      <PanelPetSUV\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n    );\n  };\n\n  const wrappedROIThresholdToolbox = () => {\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"ROIThresholdToolbox\"\n          title=\"Threshold Tools\"\n        />\n      </>\n    );\n  };\n\n  const wrappedROIThresholdExport = () => {\n    return (\n      <>\n        <PanelROIThresholdExport\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'petSUV',\n      iconName: 'tab-patient-info',\n      iconLabel: 'Patient Info',\n      label: 'Patient Info',\n      component: wrappedPanelPetSuv,\n    },\n    {\n      name: 'tmtvBox',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Toolbox',\n      component: wrappedROIThresholdToolbox,\n    },\n    {\n      name: 'tmtvExport',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Export',\n      component: wrappedROIThresholdExport,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","export default ['RectangleROIStartEndThreshold'];\n","import { metaData } from '@cornerstonejs/core';\n\nexport default function getSOPInstanceAttributes(imageId) {\n  if (imageId) {\n    return _getUIDFromImageID(imageId);\n  }\n}\n\nfunction _getUIDFromImageID(imageId) {\n  const instance = metaData.get('instance', imageId);\n\n  return {\n    SOPInstanceUID: instance.SOPInstanceUID,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    frameNumber: instance.frameNumber || 1,\n  };\n}\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\n\nconst RectangleROIStartEndThreshold = {\n  toAnnotation: (measurement, definition) => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      // points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: metadata.label,\n      data: data.cachedStats,\n      type: 'RectangleROIStartEndThreshold',\n    };\n  },\n};\n\nexport default RectangleROIStartEndThreshold;\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\n\nconst measurementServiceMappingsFactory = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  return {\n    RectangleROIStartEndThreshold: {\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROIStartEndThreshold.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService\n        ),\n      matchingCriteria: [\n        {\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\n        },\n      ],\n    },\n  };\n};\n\nexport default measurementServiceMappingsFactory;\n","import * as csTools from '@cornerstonejs/tools';\n\nfunction getRoiStats(referencedVolume, annotations) {\n  // roiStats\n  const { imageData } = referencedVolume;\n  const values = imageData.getPointData().getScalars().getData();\n\n  // Todo: add support for other strategies\n  const { fn, baseValue } = _getStrategyFn('max');\n  let value = baseValue;\n\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\n    annotations,\n    referencedVolume\n  );\n\n  const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n\n  for (let i = iMin; i <= iMax; i++) {\n    for (let j = jMin; j <= jMax; j++) {\n      for (let k = kMin; k <= kMax; k++) {\n        const offset = imageData.computeOffsetIndex([i, j, k]);\n        value = fn(values[offset], value);\n      }\n    }\n  }\n  return value;\n}\n\nfunction getThresholdValues(\n  annotationUIDs,\n  referencedVolumes,\n  config\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\n  if (config.strategy === 'range') {\n    return {\n      ptLower: Number(config.ptLower),\n      ptUpper: Number(config.ptUpper),\n      ctLower: Number(config.ctLower),\n      ctUpper: Number(config.ctUpper),\n    };\n  }\n\n  const { weight } = config;\n  const annotations = annotationUIDs.map(annotationUID =>\n    csTools.annotation.state.getAnnotation(annotationUID)\n  );\n\n  const ptValue = getRoiStats(referencedVolumes[0], annotations);\n\n  return {\n    ctLower: -Infinity,\n    ctUpper: +Infinity,\n    ptLower: weight * ptValue,\n    ptUpper: +Infinity,\n  };\n}\n\nfunction _getStrategyFn(statistic): {\n  fn: (a: number, b: number) => number;\n  baseValue: number;\n} {\n  const baseValue = -Infinity;\n  const fn = (number, maxValue) => {\n    if (number > maxValue) {\n      maxValue = number;\n    }\n    return maxValue;\n  };\n  return { fn, baseValue };\n}\n\nexport default getThresholdValues;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport { vec3 } from 'gl-matrix';\n\ntype AnnotationsForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * This method calculates the SUV peak on a segmented ROI from a reference PET\n * volume. If a rectangle annotation is provided, the peak is calculated within that\n * rectangle. Otherwise, the calculation is performed on the entire volume which\n * will be slower but same result.\n * @param viewport Viewport to use for the calculation\n * @param labelmap Labelmap from which the mask is taken\n * @param referenceVolume PET volume to use for SUV calculation\n * @param toolData [Optional] list of toolData to use for SUV calculation\n * @param segmentIndex The index of the segment to use for masking\n * @returns\n */\nfunction calculateSuvPeak(\n  labelmap: Types.IImageVolume,\n  referenceVolume: Types.IImageVolume,\n  annotations?: AnnotationsForThresholding[],\n  segmentIndex = 1\n): {\n  max: number;\n  maxIJK: Types.Point3;\n  maxLPS: Types.Point3;\n  mean: number;\n} {\n  if (referenceVolume.metadata.Modality !== 'PT') {\n    return;\n  }\n\n  const labelmapData = labelmap.getScalarData();\n  const referenceVolumeData = referenceVolume.getScalarData();\n\n  if (labelmapData.length !== referenceVolumeData.length) {\n    throw new Error('labelmap and referenceVolume must have the same number of pixels');\n  }\n\n  const { dimensions, imageData: labelmapImageData } = labelmap;\n  const { imageData: referenceVolumeImageData } = referenceVolume;\n\n  let boundsIJK;\n  // Todo: using the first annotation for now\n  if (annotations?.length && annotations[0].data?.cachedStats) {\n    const { projectionPoints } = annotations[0].data.cachedStats;\n    const pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n\n    const rectangleCornersIJK = pointsToUse.map(world => {\n      const ijk = vec3.fromValues(0, 0, 0);\n      referenceVolumeImageData.worldToIndex(world, ijk);\n      return ijk as Types.Point3;\n    });\n\n    boundsIJK = utilities.boundingBox.getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n  }\n\n  let max = 0;\n  let maxIJK = [0, 0, 0];\n  let maxLPS = [0, 0, 0];\n\n  const callback = ({ pointIJK, pointLPS }) => {\n    const offset = referenceVolumeImageData.computeOffsetIndex(pointIJK);\n    const value = labelmapData[offset];\n\n    if (value !== segmentIndex) {\n      return;\n    }\n\n    const referenceValue = referenceVolumeData[offset];\n\n    if (referenceValue > max) {\n      max = referenceValue;\n      maxIJK = pointIJK;\n      maxLPS = pointLPS;\n    }\n  };\n\n  utilities.pointInShapeCallback(labelmapImageData, () => true, callback, boundsIJK);\n\n  const direction = labelmapImageData.getDirection().slice(0, 3) as Types.Point3;\n\n  /**\n   * 2. Find the bottom and top of the great circle for the second sphere (1cc sphere)\n   * V = (4/3)πr3\n   */\n  const radius = Math.pow(1 / ((4 / 3) * Math.PI), 1 / 3) * 10;\n  const diameter = radius * 2;\n\n  const secondaryCircleWorld = vec3.create();\n  const bottomWorld = vec3.create();\n  const topWorld = vec3.create();\n  referenceVolumeImageData.indexToWorld(maxIJK as vec3, secondaryCircleWorld);\n  vec3.scaleAndAdd(bottomWorld, secondaryCircleWorld, direction, -diameter / 2);\n  vec3.scaleAndAdd(topWorld, secondaryCircleWorld, direction, diameter / 2);\n  const suvPeakCirclePoints = [bottomWorld, topWorld] as [Types.Point3, Types.Point3];\n\n  /**\n   * 3. Find the Mean and Max of the 1cc sphere centered on the suv Max of the previous\n   * sphere\n   */\n  let count = 0;\n  let acc = 0;\n  const suvPeakMeanCallback = ({ value }) => {\n    acc += value;\n    count += 1;\n  };\n\n  utilities.pointInSurroundingSphereCallback(\n    referenceVolumeImageData,\n    suvPeakCirclePoints,\n    suvPeakMeanCallback\n  );\n\n  const mean = acc / count;\n\n  return {\n    max,\n    maxIJK,\n    maxLPS,\n    mean,\n  };\n}\n\nexport default calculateSuvPeak;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions),\n * and a referenceVolume, it calculates the total metabolic tumor volume (TMTV)\n * by flattening and rasterizing each segment into a single labelmap and summing\n * the total number of volume voxels. It should be noted that for this calculation\n * we do not double count voxels that are part of multiple labelmaps.\n * @param {} labelmaps\n * @param {number} segmentIndex\n * @returns {number} TMTV in ml\n */\nfunction calculateTMTV(labelmaps: Array<Types.IImageVolume>, segmentIndex = 1): number {\n  const volumeId = 'mergedLabelmap';\n\n  const mergedLabelmap = utilities.segmentation.createMergedLabelmapForIndex(\n    labelmaps,\n    segmentIndex,\n    volumeId\n  );\n\n  const { imageData, spacing } = mergedLabelmap;\n  const values = imageData.getPointData().getScalars().getData();\n\n  // count non-zero values inside the outputData, this would\n  // consider the overlapping regions to be only counted once\n  const numVoxels = values.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n\n  return 1e-3 * numVoxels * spacing[0] * spacing[1] * spacing[2];\n}\n\nexport default calculateTMTV;\n","import dcmjs from 'dcmjs';\nimport { classes, DicomMetadataStore } from '@ohif/core';\nimport { adaptersRT } from '@cornerstonejs/adapters';\n\nconst { datasetToBlob } = dcmjs.data;\nconst metadataProvider = classes.MetadataProvider;\n\nexport default function dicomRTAnnotationExport(annotations) {\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\n    annotations,\n    metadataProvider,\n    DicomMetadataStore\n  );\n  const reportBlob = datasetToBlob(dataset);\n\n  //Create a URL for the binary.\n  var objectUrl = URL.createObjectURL(reportBlob);\n  window.location.assign(objectUrl);\n}\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\n\nexport default dicomRTAnnotationExport;\n","import { vec3 } from 'gl-matrix';\nimport OHIF from '@ohif/core';\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\nimport { classes } from '@ohif/core';\nimport getThresholdValues from './utils/getThresholdValue';\nimport calculateSuvPeak from './utils/calculateSUVPeak';\nimport calculateTMTV from './utils/calculateTMTV';\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\n\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\n\nconst metadataProvider = classes.MetadataProvider;\nconst RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS = [\n  'RectangleROIStartEndThreshold',\n  'RectangleROIThreshold',\n];\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\n\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }) => {\n  const {\n    viewportGridService,\n    uiNotificationService,\n    displaySetService,\n    hangingProtocolService,\n    toolGroupService,\n    cornerstoneViewportService,\n    segmentationService,\n  } = servicesManager.services;\n\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { getEnabledElement } = utilityModule.exports;\n\n  function _getActiveViewportsEnabledElement() {\n    const { activeViewportId } = viewportGridService.getState();\n    const { element } = getEnabledElement(activeViewportId) || {};\n    const enabledElement = cs.getEnabledElement(element);\n    return enabledElement;\n  }\n\n  function _getMatchedViewportsToolGroupIds() {\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    const toolGroupIds = [];\n    viewportMatchDetails.forEach(viewport => {\n      const { viewportOptions } = viewport;\n      const { toolGroupId } = viewportOptions;\n      if (toolGroupIds.indexOf(toolGroupId) === -1) {\n        toolGroupIds.push(toolGroupId);\n      }\n    });\n\n    return toolGroupIds;\n  }\n\n  function _getAnnotationsSelectedByToolNames(toolNames) {\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\n      const annotationUIDs =\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\n\n      return allAnnotationUIDs.concat(annotationUIDs);\n    }, []);\n  }\n\n  const actions = {\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\n      // Todo: this is assuming that the hanging protocol has successfully matched\n      // the correct PT. For future, we should have a way to filter out the PTs\n      // that are in the viewer layout (but then we have the problem of the attenuation\n      // corrected PT vs the non-attenuation correct PT)\n\n      let ptDisplaySet = null;\n      for (const [viewportId, viewportDetails] of viewportMatchDetails) {\n        const { displaySetsInfo } = viewportDetails;\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n        );\n\n        if (!displaySets || displaySets.length === 0) {\n          continue;\n        }\n\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\n\n        if (ptDisplaySet) {\n          break;\n        }\n      }\n\n      return ptDisplaySet;\n    },\n    getPTMetadata: ({ ptDisplaySet }) => {\n      const dataSource = extensionManager.getDataSources()[0];\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\n\n      const firstImageId = imageIds[0];\n      const instance = metadataProvider.get('instance', firstImageId);\n      if (instance.Modality !== 'PT') {\n        return;\n      }\n\n      const metadata = {\n        SeriesTime: instance.SeriesTime,\n        Modality: instance.Modality,\n        PatientSex: instance.PatientSex,\n        PatientWeight: instance.PatientWeight,\n        RadiopharmaceuticalInformationSequence: {\n          RadionuclideTotalDose:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\n          RadionuclideHalfLife:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\n          RadiopharmaceuticalStartTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\n          RadiopharmaceuticalStartDateTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\n        },\n      };\n\n      return metadata;\n    },\n    createNewLabelmapFromPT: async ({ label }) => {\n      // Create a segmentation of the same resolution as the source data\n      // using volumeLoader.createAndCacheDerivedVolume.\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        uiNotificationService.error('No matching PT display set found');\n        return;\n      }\n\n      const currentSegmentations = segmentationService.getSegmentations();\n\n      const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n        ptDisplaySet.displaySetInstanceUID,\n        { label: `Segmentation ${currentSegmentations.length + 1}` }\n      );\n\n      // Add Segmentation to all toolGroupIds in the viewer\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n      const representationType = LABELMAP;\n\n      for (const toolGroupId of toolGroupIds) {\n        const hydrateSegmentation = true;\n        await segmentationService.addSegmentationRepresentationToToolGroup(\n          toolGroupId,\n          segmentationId,\n          hydrateSegmentation,\n          representationType\n        );\n\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      }\n\n      segmentationService.addSegment(segmentationId, {\n        segmentIndex: 1,\n        properties: {\n          label: 'Segment 1',\n        },\n      });\n      return segmentationId;\n    },\n    setSegmentationActiveForToolGroups: ({ segmentationId }) => {\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n\n      toolGroupIds.forEach(toolGroupId => {\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      });\n    },\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\n\n      const { representationData } = segmentation;\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\n      const volumeLoaderScheme = 'cornerstoneStreamingImageVolume'; // Loader id which defines which volume loader to use\n\n      const ctDisplaySet = matchDetails.get('ctDisplaySet');\n      const ctVolumeId = `${volumeLoaderScheme}:${ctDisplaySet.displaySetInstanceUID}`; // VolumeId with loader id + volume id\n\n      const { volumeId: segVolumeId } = representationData[LABELMAP];\n      const { referencedVolumeId } = cs.cache.getVolume(segVolumeId);\n\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      if (annotationUIDs.length === 0) {\n        uiNotificationService.show({\n          title: 'Commands Module',\n          message: 'No ROIThreshold Tool is Selected',\n          type: 'error',\n        });\n        return;\n      }\n\n      const labelmapVolume = cs.cache.getVolume(segmentationId);\n      let referencedVolume = cs.cache.getVolume(referencedVolumeId);\n      const ctReferencedVolume = cs.cache.getVolume(ctVolumeId);\n\n      // check if viewport is\n\n      if (!referencedVolume) {\n        throw new Error('No Reference volume found');\n      }\n\n      if (!labelmapVolume) {\n        throw new Error('No Reference labelmap found');\n      }\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUIDs[0]);\n\n      const {\n        metadata: {\n          enabledElement: { viewport },\n        },\n      } = annotation;\n\n      const showingReferenceVolume = viewport.hasVolumeId(referencedVolumeId);\n\n      if (!showingReferenceVolume) {\n        // if the reference volume is not being displayed, we can't\n        // rely on it for thresholding, we have couple of options here\n        // 1. We choose whatever volume is being displayed\n        // 2. We check if it is a fusion viewport, we pick the volume\n        // that matches the size and dimensions of the labelmap. This might\n        // happen if the 4D PT is converted to a computed volume and displayed\n        // and wants to threshold the labelmap\n        // 3. We throw an error\n        const displaySetInstanceUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n          viewport.id\n        );\n\n        displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n          const volume = cs.cache\n            .getVolumes()\n            .find(volume => volume.volumeId.includes(displaySetInstanceUID));\n\n          if (\n            cs.utilities.isEqual(volume.dimensions, labelmapVolume.dimensions) &&\n            cs.utilities.isEqual(volume.spacing, labelmapVolume.spacing)\n          ) {\n            referencedVolume = volume;\n          }\n        });\n      }\n\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\n        annotationUIDs,\n        [referencedVolume, ctReferencedVolume],\n        config\n      );\n\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n        annotationUIDs,\n        labelmapVolume,\n        [\n          { volume: referencedVolume, lower: ptLower, upper: ptUpper },\n          { volume: ctReferencedVolume, lower: ctLower, upper: ctUpper },\n        ],\n        { overwrite: true, segmentIndex }\n      );\n    },\n    calculateSuvPeak: ({ labelmap, segmentIndex }) => {\n      const { referencedVolumeId } = labelmap;\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\n\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotations = annotationUIDs.map(annotationUID =>\n        csTools.annotation.state.getAnnotation(annotationUID)\n      );\n\n      const suvPeak = calculateSuvPeak(labelmap, referencedVolume, annotations, segmentIndex);\n      return {\n        suvPeak: suvPeak.mean,\n        suvMax: suvPeak.max,\n        suvMaxIJK: suvPeak.maxIJK,\n        suvMaxLPS: suvPeak.maxLPS,\n      };\n    },\n    getLesionStats: ({ labelmap, segmentIndex = 1 }) => {\n      const { scalarData, spacing } = labelmap;\n      const referencedScalarData = cs.cache.getVolume(labelmap.referencedVolumeId).getScalarData();\n\n      let segmentationMax = -Infinity;\n      let segmentationMin = Infinity;\n      let segmentationValues = [];\n\n      let voxelCount = 0;\n      for (let i = 0; i < scalarData.length; i++) {\n        if (scalarData[i] === segmentIndex) {\n          const value = referencedScalarData[i];\n          segmentationValues.push(value);\n          if (value > segmentationMax) {\n            segmentationMax = value;\n          }\n          if (value < segmentationMin) {\n            segmentationMin = value;\n          }\n          voxelCount++;\n        }\n      }\n\n      const stats = {\n        minValue: segmentationMin,\n        maxValue: segmentationMax,\n        meanValue: segmentationValues.reduce((a, b) => a + b, 0) / voxelCount,\n        stdValue: Math.sqrt(\n          segmentationValues.reduce((a, b) => a + b * b, 0) / voxelCount -\n            segmentationValues.reduce((a, b) => a + b, 0) / voxelCount ** 2\n        ),\n        volume: voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3,\n      };\n\n      return stats;\n    },\n    calculateLesionGlycolysis: ({ lesionStats }) => {\n      const { meanValue, volume } = lesionStats;\n\n      return {\n        lesionGlyoclysisStats: volume * meanValue,\n      };\n    },\n    calculateTMTV: ({ segmentations }) => {\n      const labelmaps = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\n\n      if (!labelmaps.length) {\n        return;\n      }\n\n      return calculateTMTV(labelmaps);\n    },\n    exportTMTVReportCSV: ({ segmentations, tmtv, config, options }) => {\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\n        segmentations,\n      });\n\n      const tlg = actions.getTotalLesionGlycolysis({ segmentations });\n      const additionalReportRows = [\n        { key: 'Total Lesion Glycolysis', value: { tlg: tlg.toFixed(4) } },\n        { key: 'Threshold Configuration', value: { ...config } },\n      ];\n\n      if (tmtv !== undefined) {\n        additionalReportRows.unshift({\n          key: 'Total Metabolic Tumor Volume',\n          value: { tmtv },\n        });\n      }\n\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\n    },\n    getTotalLesionGlycolysis: ({ segmentations }) => {\n      const labelmapVolumes = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\n\n      let mergedLabelmap;\n      // merge labelmap will through an error if labels maps are not the same size\n      // or same direction or ....\n      try {\n        mergedLabelmap =\n          csTools.utilities.segmentation.createMergedLabelmapForIndex(labelmapVolumes);\n      } catch (e) {\n        console.error('commandsModule::getTotalLesionGlycolysis', e);\n        return;\n      }\n\n      // grabbing the first labelmap referenceVolume since it will be the same for all\n      const { referencedVolumeId, spacing } = labelmapVolumes[0];\n\n      if (!referencedVolumeId) {\n        console.error('commandsModule::getTotalLesionGlycolysis:No referencedVolumeId found');\n      }\n\n      const ptVolume = cs.cache.getVolume(referencedVolumeId);\n      const mergedLabelData = mergedLabelmap.getScalarData();\n\n      if (mergedLabelData.length !== ptVolume.getScalarData().length) {\n        console.error(\n          'commandsModule::getTotalLesionGlycolysis:Labelmap and ptVolume are not the same size'\n        );\n      }\n\n      let suv = 0;\n      let totalLesionVoxelCount = 0;\n      for (let i = 0; i < mergedLabelData.length; i++) {\n        // if not background\n        if (mergedLabelData[i] !== 0) {\n          suv += ptVolume.getScalarData()[i];\n          totalLesionVoxelCount += 1;\n        }\n      }\n\n      // Average SUV for the merged labelmap\n      const averageSuv = suv / totalLesionVoxelCount;\n\n      // total Lesion Glycolysis [suv * ml]\n      return averageSuv * totalLesionVoxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3;\n    },\n    setStartSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      const { handles } = annotation.data;\n      const { points } = handles;\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.startSlice = sliceIndex;\n\n      // distance between camera focal point and each point on the rectangle\n      const newPoints = points.map(point => {\n        const distance = vec3.create();\n        vec3.subtract(distance, focalPoint, point);\n        // distance in the direction of the viewPlaneNormal\n        const distanceInViewPlane = vec3.dot(distance, viewPlaneNormal);\n        // new point is current point minus distanceInViewPlane\n        const newPoint = vec3.create();\n        vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, distanceInViewPlane);\n\n        return newPoint;\n        //\n      });\n\n      handles.points = newPoints;\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n      viewport.render();\n    },\n    setEndSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.endSlice = sliceIndex;\n\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n\n      viewport.render();\n    },\n    createTMTVRTReport: () => {\n      // get all Rectangle ROI annotation\n      const stateManager = csTools.annotation.state.getAnnotationManager();\n\n      const annotations = [];\n\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\n        const ROIAnnotations = RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\n          []\n        );\n\n        annotations.push(...ROIAnnotations);\n      });\n\n      commandsManager.runCommand('exportRTReportForAnnotations', {\n        annotations,\n      });\n    },\n    getSegmentationCSVReport: ({ segmentations }) => {\n      if (!segmentations || !segmentations.length) {\n        segmentations = segmentationService.getSegmentations();\n      }\n\n      let report = {};\n\n      for (const segmentation of segmentations) {\n        const { id, label, cachedStats: data } = segmentation;\n\n        const segReport = { id, label };\n\n        if (!data) {\n          report[id] = segReport;\n          continue;\n        }\n\n        Object.keys(data).forEach(key => {\n          if (typeof data[key] !== 'object') {\n            segReport[key] = data[key];\n          } else {\n            Object.keys(data[key]).forEach(subKey => {\n              const newKey = `${key}_${subKey}`;\n              segReport[newKey] = data[key][subKey];\n            });\n          }\n        });\n\n        const labelmapVolume = segmentationService.getLabelmapVolume(id);\n\n        if (!labelmapVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const referencedVolumeId = labelmapVolume.referencedVolumeId;\n        segReport.referencedVolumeId = referencedVolumeId;\n\n        const referencedVolume = segmentationService.getLabelmapVolume(referencedVolumeId);\n\n        if (!referencedVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const firstImageId = referencedVolume.imageIds[0];\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\n\n        if (!instance) {\n          report[id] = segReport;\n          continue;\n        }\n\n        report[id] = {\n          ...segReport,\n          PatientID: instance.PatientID ?? '000000',\n          PatientName: instance.PatientName.Alphabetic,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          StudyDate: instance.StudyDate,\n        };\n      }\n\n      return report;\n    },\n    exportRTReportForAnnotations: ({ annotations }) => {\n      dicomRTAnnotationExport(annotations);\n    },\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        return;\n      }\n\n      const fusionViewportIds = toolGroup.getViewportIds();\n\n      let viewports = [];\n      fusionViewportIds.forEach(viewportId => {\n        commandsManager.runCommand('setViewportColormap', {\n          viewportId,\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\n          colormap: {\n            name: colormap,\n          },\n        });\n\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\n      });\n\n      viewports.forEach(viewport => {\n        viewport.render();\n      });\n    },\n  };\n\n  const definitions = {\n    setEndSliceForROIThresholdTool: {\n      commandFn: actions.setEndSliceForROIThresholdTool,\n    },\n    setStartSliceForROIThresholdTool: {\n      commandFn: actions.setStartSliceForROIThresholdTool,\n    },\n    getMatchingPTDisplaySet: {\n      commandFn: actions.getMatchingPTDisplaySet,\n    },\n    getPTMetadata: {\n      commandFn: actions.getPTMetadata,\n    },\n    createNewLabelmapFromPT: {\n      commandFn: actions.createNewLabelmapFromPT,\n    },\n    setSegmentationActiveForToolGroups: {\n      commandFn: actions.setSegmentationActiveForToolGroups,\n    },\n    thresholdSegmentationByRectangleROITool: {\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\n    },\n    getTotalLesionGlycolysis: {\n      commandFn: actions.getTotalLesionGlycolysis,\n    },\n    calculateSuvPeak: {\n      commandFn: actions.calculateSuvPeak,\n    },\n    getLesionStats: {\n      commandFn: actions.getLesionStats,\n    },\n    calculateTMTV: {\n      commandFn: actions.calculateTMTV,\n    },\n    exportTMTVReportCSV: {\n      commandFn: actions.exportTMTVReportCSV,\n    },\n    createTMTVRTReport: {\n      commandFn: actions.createTMTVRTReport,\n    },\n    getSegmentationCSVReport: {\n      commandFn: actions.getSegmentationCSVReport,\n    },\n    exportRTReportForAnnotations: {\n      commandFn: actions.exportRTReportForAnnotations,\n    },\n    setFusionPTColormap: {\n      commandFn: actions.setFusionPTColormap,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'TMTV:CORNERSTONE',\n  };\n};\n\nexport default commandsModule;\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\n  const firstReport = segReport[Object.keys(segReport)[0]];\n  const columns = Object.keys(firstReport);\n  const csv = [columns.join(',')];\n\n  Object.values(segReport).forEach(segmentation => {\n    const row = [];\n    columns.forEach(column => {\n      // if it is array then we need to replace , with space to avoid csv parsing error\n      row.push(\n        Array.isArray(segmentation[column]) ? segmentation[column].join(' ') : segmentation[column]\n      );\n    });\n    csv.push(row.join(','));\n  });\n\n  csv.push('');\n  csv.push('');\n  csv.push('');\n\n  csv.push(`Patient ID,${firstReport.PatientID}`);\n  csv.push(`Study Date,${firstReport.StudyDate}`);\n  csv.push('');\n  additionalReportRows.forEach(({ key, value: values }) => {\n    const temp = [];\n    temp.push(`${key}`);\n    Object.keys(values).forEach(k => {\n      temp.push(`${k}`);\n      temp.push(`${values[k]}`);\n    });\n\n    csv.push(temp.join(','));\n  });\n\n  const blob = new Blob([csv.join('\\n')], {\n    type: 'text/csv;charset=utf-8',\n  });\n\n  const url = URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\n  a.click();\n}\n","import React from 'react';\nimport { Input, Label, Select, LegacyButton, LegacyButtonGroup } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nexport const ROI_STAT = 'roi_stat';\nconst RANGE = 'range';\n\nconst options = [\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\n];\n\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\n  const { t } = useTranslation('ROIThresholdConfiguration');\n\n  return (\n    <div className=\"bg-primary-dark flex flex-col space-y-4\">\n      <div className=\"flex items-end space-x-2\">\n        <div className=\"flex w-1/2 flex-col\">\n          <Select\n            label={t('Strategy')}\n            closeMenuOnSelect={true}\n            className=\"border-primary-main mr-2 bg-black text-white \"\n            options={options}\n            placeholder={options.find(option => option.value === config.strategy).placeHolder}\n            value={config.strategy}\n            onChange={({ value }) => {\n              dispatch({\n                type: 'setStrategy',\n                payload: {\n                  strategy: value,\n                },\n              });\n            }}\n          />\n        </div>\n        <div className=\"w-1/2\">\n          {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\n          <LegacyButtonGroup>\n            <LegacyButton\n              size=\"initial\"\n              className=\"px-2 py-2 text-base text-white\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\n            >\n              {t('Start')}\n            </LegacyButton>\n            <LegacyButton\n              size=\"initial\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              className=\"px-2 py-2 text-base text-white\"\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\n            >\n              {t('End')}\n            </LegacyButton>\n          </LegacyButtonGroup>\n        </div>\n      </div>\n\n      {config.strategy === ROI_STAT && (\n        <Input\n          label={t('Percentage of Max SUV')}\n          labelClassName=\"text-[13px] font-inter text-white\"\n          className=\"border-primary-main bg-black\"\n          type=\"text\"\n          containerClassName=\"mr-2\"\n          value={config.weight}\n          onChange={e => {\n            dispatch({\n              type: 'setWeight',\n              payload: {\n                weight: e.target.value,\n              },\n            });\n          }}\n        />\n      )}\n      {config.strategy !== ROI_STAT && (\n        <div className=\"mr-2 text-sm\">\n          <table>\n            <tbody>\n              <tr className=\"mt-2\">\n                <td\n                  className=\"pr-4\"\n                  colSpan=\"3\"\n                >\n                  <Label\n                    className=\"font-inter text-[13px] text-white\"\n                    text=\"Lower & Upper Ranges\"\n                  ></Label>\n                </td>\n              </tr>\n              <tr className=\"mt-2\">\n                <td className=\"pr-4 pt-2 text-center\">\n                  <Label\n                    className=\"text-white\"\n                    text=\"CT\"\n                  ></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td className=\"pr-4 pt-2 text-center\">\n                  <Label\n                    className=\"text-white\"\n                    text=\"PT\"\n                  ></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ROIThresholdConfiguration;\n","import React, { useState, useCallback, useReducer, useEffect } from 'react';\nimport { Button } from '@ohif/ui';\nimport ROIThresholdConfiguration, {\n  ROI_STAT,\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\nimport * as cs3dTools from '@cornerstonejs/tools';\n\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\nconst DEFAULT_STRATEGY = ROI_STAT;\n\nfunction reducer(state, action) {\n  const { payload } = action;\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\n\n  switch (action.type) {\n    case 'setStrategy':\n      return {\n        ...state,\n        strategy,\n      };\n    case 'setThreshold':\n      return {\n        ...state,\n        ctLower: ctLower ? ctLower : state.ctLower,\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\n        ptLower: ptLower ? ptLower : state.ptLower,\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\n      };\n    case 'setWeight':\n      return {\n        ...state,\n        weight,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction RectangleROIOptions({ servicesManager, commandsManager }) {\n  const { segmentationService } = servicesManager.services;\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n\n  const runCommand = useCallback(\n    (commandName, commandOptions = {}) => {\n      return commandsManager.runCommand(commandName, commandOptions);\n    },\n    [commandsManager]\n  );\n\n  const [config, dispatch] = useReducer(reducer, {\n    strategy: DEFAULT_STRATEGY,\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\n    weight: WEIGHT_DEFAULT,\n  });\n\n  const handleROIThresholding = useCallback(() => {\n    const segmentationId = selectedSegmentationId;\n\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const activeSegmentIndex =\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\n\n    // run the threshold based on the active segment index\n    // Todo: later find a way to associate each rectangle with a segment (e.g., maybe with color?)\n    const labelmap = runCommand('thresholdSegmentationByRectangleROITool', {\n      segmentationId,\n      config,\n      segmentIndex: activeSegmentIndex,\n    });\n\n    // re-calculating the cached stats for the active segmentation\n    const updatedPerSegmentCachedStats = {};\n    segmentation.segments = segmentation.segments.map(segment => {\n      if (!segment || !segment.segmentIndex) {\n        return segment;\n      }\n\n      const segmentIndex = segment.segmentIndex;\n\n      const lesionStats = runCommand('getLesionStats', { labelmap, segmentIndex });\n      const suvPeak = runCommand('calculateSuvPeak', { labelmap, segmentIndex });\n      const lesionGlyoclysisStats = lesionStats.volume * lesionStats.meanValue;\n\n      // update segDetails with the suv peak for the active segmentation\n      const cachedStats = {\n        lesionStats,\n        suvPeak,\n        lesionGlyoclysisStats,\n      };\n\n      segment.cachedStats = cachedStats;\n      segment.displayText = [\n        `SUV Peak: ${suvPeak.suvPeak.toFixed(2)}`,\n        `Volume: ${lesionStats.volume.toFixed(2)} mm3`,\n      ];\n      updatedPerSegmentCachedStats[segmentIndex] = cachedStats;\n\n      return segment;\n    });\n\n    const notYetUpdatedAtSource = true;\n\n    const segmentations = segmentationService.getSegmentations();\n    const tmtv = runCommand('calculateTMTV', { segmentations });\n\n    segmentation.cachedStats = Object.assign(\n      segmentation.cachedStats,\n      updatedPerSegmentCachedStats,\n      {\n        tmtv: {\n          value: tmtv.toFixed(3),\n          config: { ...config },\n        },\n      }\n    );\n\n    segmentationService.addOrUpdateSegmentation(\n      {\n        ...segmentation,\n      },\n      false, // don't suppress events\n      notYetUpdatedAtSource\n    );\n  }, [selectedSegmentationId, config]);\n\n  useEffect(() => {\n    const segmentations = segmentationService.getSegmentations();\n\n    if (!segmentations.length) {\n      return;\n    }\n\n    const isActive = segmentations.find(seg => seg.isActive);\n    setSelectedSegmentationId(isActive.id);\n  }, []);\n\n  /**\n   * Update UI based on segmentation changes (added, removed, updated)\n   */\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const subscriptions = [];\n\n    [added, updated].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n\n        if (!segmentations.length) {\n          return;\n        }\n\n        const isActive = segmentations.find(seg => seg.isActive);\n        setSelectedSegmentationId(isActive.id);\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\n      () => {\n        const segmentations = segmentationService.getSegmentations();\n\n        if (segmentations.length > 0) {\n          setSelectedSegmentationId(segmentations[0].id);\n          handleROIThresholding();\n        } else {\n          setSelectedSegmentationId(null);\n          handleROIThresholding();\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div className=\"invisible-scrollbar mb-2 flex flex-col overflow-y-auto overflow-x-hidden\">\n      <ROIThresholdConfiguration\n        config={config}\n        dispatch={dispatch}\n        runCommand={runCommand}\n      />\n      {selectedSegmentationId !== null && (\n        <Button\n          className=\"mt-2 !h-[26px] !w-[75px]\"\n          onClick={handleROIThresholding}\n        >\n          Run\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default RectangleROIOptions;\n","import { id } from './id';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport init from './init';\nimport commandsModule from './commandsModule';\nimport getToolbarModule from './getToolbarModule';\n\n/**\n *\n */\nconst tmtvExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\n    init({ servicesManager, commandsManager, extensionManager, configuration });\n  },\n  getToolbarModule,\n  getPanelModule,\n  getHangingProtocolModule,\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\n    return commandsModule({\n      servicesManager,\n      commandsManager,\n      extensionManager,\n    });\n  },\n};\n\nexport default tmtvExtension;\n","import { addTool, RectangleROIStartEndThresholdTool } from '@cornerstonejs/tools';\n\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n * @param {Object|Array} configuration.csToolsConfig\n */\nexport default function init({ servicesManager }) {\n  const { measurementService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n\n  addTool(RectangleROIStartEndThresholdTool);\n\n  const { RectangleROIStartEndThreshold } = measurementServiceMappingsFactory(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService\n  );\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROIStartEndThreshold',\n    RectangleROIStartEndThreshold.matchingCriteria,\n    RectangleROIStartEndThreshold.toAnnotation,\n    RectangleROIStartEndThreshold.toMeasurement\n  );\n}\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\n\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\n  return [\n    {\n      name: 'tmtv.RectangleROIThresholdOptions',\n      defaultComponent: () => RectangleROIOptions({ commandsManager, servicesManager }),\n    },\n  ];\n}\n"],"names":["id","packageJson","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","type","source","target","options","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","syncInvertState","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","PanelPetSUV","servicesManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","toolbarService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","React","className","PanelSection","title","Input","containerClassName","label","labelClassName","onChange","e","labelChildren","Button","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","PanelRoiThresholdSegmentation","segmentationService","uiNotificationService","segmentations","setSegmentations","getSegmentations","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","evt","push","unsub","tmtvValue","cachedStats","tmtv","config","segmentation","suvPeak","Number","isNaN","show","message","actions","disabled","ActionButtons","window","open","Icon","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","getSegmentation","toggleSegmentationVisibility","extensionManager","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedROIThresholdToolbox","Toolbox","buttonSectionId","wrappedROIThresholdExport","PanelROIThresholdExport","getSOPInstanceAttributes","imageId","instance","metaData","SOPInstanceUID","frameNumber","_getUIDFromImageID","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","getRoiStats","referencedVolume","annotations","imageData","values","getPointData","getScalars","getData","fn","baseValue","statistic","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","iMin","iMax","jMin","jMax","kMin","kMax","i","j","k","computeOffsetIndex","annotationUIDs","referencedVolumes","strategy","ptLower","ptUpper","ctLower","ctUpper","map","labelmap","referenceVolume","segmentIndex","Modality","labelmapData","getScalarData","referenceVolumeData","dimensions","labelmapImageData","referenceVolumeImageData","projectionPoints","rectangleCornersIJK","concat","world","ijk","vec3","worldToIndex","utilities","max","maxIJK","maxLPS","callback","pointIJK","pointLPS","offset","referenceValue","direction","getDirection","slice","diameter","Math","pow","PI","secondaryCircleWorld","bottomWorld","topWorld","indexToWorld","suvPeakCirclePoints","count","acc","suvPeakMeanCallback","mean","labelmaps","mergedLabelmap","spacing","reduce","curr","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","location","assign","RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS","LABELMAP","Labelmap","commandsModule","viewportGridService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","cs","_getMatchedViewportsToolGroupIds","toolGroupIds","viewport","indexOf","_getAnnotationsSelectedByToolNames","toolNames","allAnnotationUIDs","viewportDetails","displaySetsInfo","getDisplaySetByUID","find","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","async","error","currentSegmentations","segmentationId","createSegmentationForDisplaySet","representationType","hydrateSegmentation","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","addSegment","setSegmentationActiveForToolGroups","thresholdSegmentationByRectangleROITool","representationData","displaySetMatchDetails","matchDetails","ctVolumeId","volumeId","segVolumeId","referencedVolumeId","getVolume","labelmapVolume","ctReferencedVolume","enabledElement","hasVolumeId","getDisplaySetsUIDsForViewport","volume","getVolumes","getThresholdValues","lower","upper","overwrite","calculateSuvPeak","suvMax","suvMaxIJK","suvMaxLPS","getLesionStats","scalarData","referencedScalarData","segmentationMax","segmentationMin","segmentationValues","voxelCount","minValue","meanValue","a","b","stdValue","sqrt","calculateLesionGlycolysis","lesionStats","lesionGlyoclysisStats","calculateTMTV","s","getLabelmapVolume","exportTMTVReportCSV","segReport","additionalReportRows","tlg","getTotalLesionGlycolysis","toFixed","undefined","unshift","firstReport","csv","join","row","column","Array","isArray","PatientID","StudyDate","temp","blob","Blob","url","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","labelmapVolumes","ptVolume","mergedLabelData","suv","totalLesionVoxelCount","setStartSliceForROIThresholdTool","focalPoint","viewPlaneNormal","getCamera","handles","points","sliceIndex","getCurrentImageIdIndex","startSlice","newPoints","point","distance","distanceInViewPlane","newPoint","invalidated","render","setEndSliceForROIThresholdTool","endSlice","createTMTVRTReport","stateManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","report","subKey","imageIds","OHIF","PatientName","Alphabetic","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","ROI_STAT","placeHolder","dispatch","Select","closeMenuOnSelect","placeholder","option","payload","LegacyButtonGroup","LegacyButton","size","color","variant","colSpan","Label","text","DEFAULT_STRATEGY","reducer","state","action","selectedSegmentationId","setSelectedSegmentationId","useCallback","commandName","commandOptions","useReducer","handleROIThresholding","activeSegmentIndex","cs3dTools","updatedPerSegmentCachedStats","segments","segment","displayText","addOrUpdateSegmentation","isActive","seg","ROIThresholdConfiguration","tmtvExtension","preRegistration","configuration","addTool","RectangleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}